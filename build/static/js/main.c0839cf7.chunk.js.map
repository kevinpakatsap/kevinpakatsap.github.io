{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","conversations","setConversations","React","createElement","className","onSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","data","newConversation","userMessage","kevinResponse","concat","_toConsumableArray","value","placeholder","onChange","target","type","map","conv","index","key","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0OAqDeA,MAlDf,WACE,IAAAC,EAA8BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,EAA0CL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA/CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAsBtC,OACEG,IAAAC,cAAA,OAAKC,UAAU,OACXF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,QAAME,SAvBS,SAACC,GACpBA,EAAEC,iBACFC,MAAM,yBAA0B,CAC9BC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEjB,cAEtBkB,MAAK,SAACC,GAAG,OAAKA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAMC,EAAkB,CACtBC,YAAavB,EACbwB,cAAeH,EAAKrB,SAEtBK,EAAiB,GAADoB,OAAAC,YAAKtB,GAAa,CAAEkB,KACpCrB,EAAW,SAQPK,IAAAC,cAAA,YACIC,UAAU,WACVmB,MAAO3B,EACP4B,YAAY,oBACZC,SAAU,SAACnB,GAAC,OAAKT,EAAWS,EAAEoB,OAAOH,UAEzCrB,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAAA,UAAQC,UAAU,eAAeuB,KAAK,UAAS,YAGvDzB,IAAAC,cAAA,OAAKC,UAAU,yBACVJ,EAAc4B,KAAI,SAACC,EAAMC,GAAK,OAC3B5B,IAAAC,cAAA,OAAK4B,IAAKD,GACN5B,IAAAC,cAAA,OAAKC,UAAU,eAAcF,IAAAC,cAAA,SAAG,gBAAgBD,IAAAC,cAAA,YAAO0B,EAAKV,aAAmB,KAC/EjB,IAAAC,cAAA,OAAKC,UAAU,eAAcF,IAAAC,cAAA,SAAG,UAAUD,IAAAC,cAAA,YAAO0B,EAAKT,uBCjC3DY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,SAAAqB,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDDQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3C,IAAAC,cAACD,IAAM4C,WAAU,KACf5C,IAAAC,cAACZ,EAAG,QAORyC,K","file":"static/js/main.c0839cf7.chunk.js","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [message, setMessage] = useState('');\n  const [conversations, setConversations] = useState([]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    fetch('http://localhost:3001/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ message }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        const newConversation = {\n          userMessage: message,\n          kevinResponse: data.message\n        };\n        setConversations([...conversations, newConversation]);\n        setMessage(''); // Clear input box\n      });\n  };\n\n  return (\n    <div className=\"App\">\n        <h1>Kevin AI</h1>\n        <form onSubmit={handleSubmit}>\n            <textarea\n                className=\"inputBox\"\n                value={message}\n                placeholder=\"Ask me a question\"\n                onChange={(e) => setMessage(e.target.value)}\n            ></textarea>\n            <div className=\"buttonContainer\">\n                <button className=\"submitButton\" type=\"submit\">Submit</button>\n            </div>\n        </form>\n        <div className=\"conversationContainer\">\n            {conversations.map((conv, index) => (\n                <div key={index}>\n                    <div className=\"userMessage\"><b>Interviewer:</b><span>{conv.userMessage}</span> </div>\n                    <div className=\"responseBox\"><b>Kevin:</b><span>{conv.kevinResponse}</span></div>\n                </div>\n            ))}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}